import plugin from "tailwindcss/plugin";
import daisyui from "daisyui";
import Color from "color";
import * as culori from "culori";
import { wcagContrast } from "culori";
import daisyuiDefaultThemes from "daisyui/src/theming/themes";
// const daisyuiDefaultThemes = require("daisyui/src/theming/themes");
// const daisyui = require("daisyui");
// const Color = require("color");
// const culori = require("culori");

const colorWhite = "#FFFFFF";
const colorBlack = "#000000";
function isDark(color) {
  if (wcagContrast(color, colorWhite) > 3.5) {
    return true;
  }
  return false;
}

function generateSaturatedColors(inputColor, n) {
  let color;
  try {
    color = Color(inputColor);
  } catch (e) {
    const oklchObject = culori.oklch(inputColor);
    const rgbObject = culori.converter("rgb")(oklchObject);
    const rgbColor = `rgb(${Math.round(rgbObject.r)},${Math.round(
      rgbObject.g
    )},${Math.round(rgbObject.b)})`;

    color = Color(rgbColor);
  }
  // const saturation = color.saturationl();
  const saturation = color.lightness();
  const increment = 100 / (n + 1); // 饱和度的增量
  const colors: any = [];
  // 直接生成从0到100亮度的颜色
  for (let i = 1; i <= n; i++) {
    colors.push(color.lightness(increment * i).hex());
  }

  // 分别尝试饱和度递增和递减
  // for (let i = 1; i <= n; i++) {
  //   // 如果饱和度已经是100%，则只能递减
  //   if (saturation === 100) {
  //     colors.push(color.lightness(saturation - increment * i).hex());
  //   }
  //   // 如果饱和度是0%，则只能递增
  //   else if (saturation === 0) {
  //     colors.push(color.lightness(saturation + increment * i).hex());
  //   }
  //   // 如果可以增加和减少饱和度，将颜色均匀分布
  //   else {
  //     // 减少饱和度的颜色
  //     if (i <= Math.floor(n / 2)) {
  //       colors.push(
  //         color.lightness(Math.max(saturation - increment * i, 0)).hex()
  //       );
  //     }
  //     // 增加饱和度的颜色
  //     else {
  //       colors.push(
  //         color
  //           .lightness(
  //             Math.min(saturation + increment * (i - Math.floor(n / 2)), 100)
  //           )
  //           .hex()
  //       );
  //     }
  //   }
  // }
  //排序使其从低到高
  // colors.sort((a: any, b: any) => {
  //   return Color(a).lightness() - Color(b).lightness();
  // });

  return colors;
}

const goatPlugin = () =>
  plugin(
    ({ addBase, theme, config }) => {
      if (config<string>("prefix") === "sl-") {
        console.warn(
          'A Tailwind prefix of "sl-" will clash with Starlight’s built-in styles.\n' +
            "Please set a different prefix in your Tailwind config file."
        );
      }

      const mustThemes = ["light", "dark"];
      const darkThemeName: string = config("daisyui.darkTheme") ?? "dark";
      const daisyuiThemes: any = config("daisyui.themes") || mustThemes; //可能是string[]或者object[]
      // daisyui默认主题至少包含light和dark
      if (
        !daisyuiThemes.some(
          (theme: any) => theme === "light" || Object.keys(theme)[0] === "light"
        )
      ) {
        daisyuiThemes.push("light");
      }
      if (
        !daisyuiThemes.some(
          (theme: any) =>
            theme === darkThemeName || Object.keys(theme)[0] === darkThemeName
        )
      ) {
        daisyuiThemes.push("dark");
      }

      const themeAccent = (
        shade: 50 | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | 950,
        fallback: string
      ) =>
        shade === 950
          ? theme(
              `colors.accent.${shade}`,
              theme(`colors.accent.900`, fallback)
            )
          : theme(`colors.accent.${shade}`, fallback);

      //拼接成root中的对象
      //daisyuiThemes:[{light:{}},{dark:{}},'cmyki']
      //themeRoot:{&[data-theme="light"]:{}\n&[data-theme="dark"]:{}}
      const themeRoot = daisyuiThemes.reduce((prev, t) => {
        const themeName = typeof t === "string" ? t : Object.keys(t)[0];
        const defaultThemeConfig =
          daisyuiDefaultThemes[
            themeName === darkThemeName ? "dark" : themeName
          ];
        const curThemeConfigInDaisyui =
          t[themeName] || defaultThemeConfig || {};
        const {
          white,
          gray,
          accent = defaultThemeConfig.accent,
        } = curThemeConfigInDaisyui;
        const otherThemeCss = {
          "--fallback-p": curThemeConfigInDaisyui.primary,
          "--fallback-s": curThemeConfigInDaisyui.secondary,
          "--fallback-n": curThemeConfigInDaisyui.neutral,
          "--fallback-b1": curThemeConfigInDaisyui["base-100"],
          "--fallback-in": curThemeConfigInDaisyui.info,
          "--fallback-su": curThemeConfigInDaisyui.success,
          "--fallback-wa": curThemeConfigInDaisyui.warning,
          "--fallback-er": curThemeConfigInDaisyui.error,
        };
        //dark主题
        if (themeName === darkThemeName) {
          let grayColors = {};
          let accentColors = {};
          if (typeof gray === "object" || !gray) {
            grayColors = {
              "--sl-color-gray-1": gray?.[200] ?? theme("colors.gray.200"),
              "--sl-color-gray-2": gray?.[300] ?? theme("colors.gray.300"),
              "--sl-color-gray-3": gray?.[400] ?? theme("colors.gray.400"),
              "--sl-color-gray-4": gray?.[600] ?? theme("colors.gray.600"),
              "--sl-color-gray-5": gray?.[700] ?? theme("colors.gray.700"),
              "--sl-color-gray-6": gray?.[800] ?? theme("colors.gray.800"),
              "--sl-color-black": gray?.[900] ?? theme("colors.gray.900"),
            };
          } else {
            const grays = generateSaturatedColors(gray, 8);
            grayColors = grays.reduce(
              (prevGray: any, cur: any, index: number) => {
                if (index < 7) prevGray[`--sl-color-gray-${index + 1}`] = cur;
                else prevGray[`--sl-color-black`] = cur;
                return prevGray;
              },
              {}
            );
          }
          if (typeof accent === "object" || !accent) {
            accentColors = {
              "--sl-color-accent-low":
                accent?.[950] ?? themeAccent(950, "#1e1b4b"),
              "--sl-color-accent":
                accent?.[600] ?? accent ?? themeAccent(600, "#4f46e5"),
              "--sl-color-accent-high":
                accent?.[200] ?? themeAccent(200, "#c7d2fe"),
            };
          } else {
            const accents = generateSaturatedColors(accent, 3);
            accentColors = {
              "--sl-color-accent-low": accents[2],
              "--sl-color-accent": accents[1],
              "--sl-color-accent-high": accents[0],
            };
          }

          prev[
            `&[data-theme="${
              themeName === darkThemeName ? "dark" : themeName
            }"]`
          ] = {
            "--sl-color-white": white ?? theme("colors.white", "#fff"),
            ...grayColors,
            ...accentColors,
            ...otherThemeCss,
          };
        }
        //其他主题：light...
        else {
          let grayColors = {};
          let accentColors = {};
          if (typeof gray === "object" || !gray) {
            grayColors = {
              "--sl-color-white": gray?.[900] ?? theme("colors.gray.900"),
              "--sl-color-gray-1": gray?.[800] ?? theme("colors.gray.800"),
              "--sl-color-gray-2": gray?.[700] ?? theme("colors.gray.700"),
              "--sl-color-gray-3": gray?.[600] ?? theme("colors.gray.500"),
              "--sl-color-gray-4": gray?.[400] ?? theme("colors.gray.400"),
              "--sl-color-gray-5": gray?.[300] ?? theme("colors.gray.300"),
              "--sl-color-gray-6": gray?.[200] ?? theme("colors.gray.200"),
              "--sl-color-gray-7": gray?.[100] ?? theme("colors.gray.100"),
            };
          } else {
            const grays = generateSaturatedColors(gray, 8);
            grayColors = grays.reduce(
              (prevGray: any, cur: any, index: number) => {
                if (index > 0) prevGray[`--sl-color-gray-${index}`] = cur;
                else prevGray[`--sl-color-white`] = cur;
                return prevGray;
              },
              {}
            );
          }
          if (typeof accent === "object" || !accent) {
            accentColors = {
              "--sl-color-accent-low":
                accent?.[200] ?? themeAccent(200, "#1e1b4b"),
              "--sl-color-accent":
                accent?.[600] ?? accent ?? themeAccent(600, "#4f46e5"),
              "--sl-color-accent-high":
                accent?.[950] ?? themeAccent(950, "#c7d2fe"),
            };
          } else {
            const accents = generateSaturatedColors(accent, 3);
            accentColors = {
              "--sl-color-accent-low": accents[0],
              "--sl-color-accent": accents[1],
              "--sl-color-accent-high": accents[2],
            };
          }

          prev[`&[data-theme="${themeName}"]`] = {
            ...grayColors,
            "--sl-color-black": white ?? theme("colors.white", "#fff"),
            ...accentColors,
            ...otherThemeCss,
          };
        }

        return prev;
      }, {});

      addBase({
        ":root": themeRoot,
      });

      addBase({
        // Restore crucial styles from Tailwind Preflight: https://tailwindcss.com/docs/preflight
        // Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)
        "*, ::before, ::after": {
          borderWidth: "0",
          borderStyle: "solid",
          borderColor: theme("borderColor.DEFAULT", "currentColor"),
        },
        "::before, ::after": { "--tw-content": "" },

        ":root": {
          // Use Tailwind-configured font families.
          "--sl-font": theme("fontFamily.sans"),
          "--sl-font-mono": theme("fontFamily.mono"),
        },
      });
      //docsearch
      addBase({
        ":root": {
          "--docsearch-primary-color": "var(--sl-color-text-accent)",
          "--docsearch-text-color": "var(--sl-color-text)",
          "--docsearch-spacing": "12px",
          "--docsearch-icon-stroke-width": "1.4",
          "--docsearch-highlight-color": "var(--docsearch-primary-color)",
          "--docsearch-muted-color": "var(--sl-color-gray-3)",
          "--docsearch-container-background":
            "var(--sl-color-backdrop-overlay)",
          "--docsearch-modal-width": "560px",
          "--docsearch-modal-height": "600px",
          "--docsearch-modal-background": "var(--sl-color-gray-6)",
          "--docsearch-modal-shadow": "var(--sl-shadow-lg)",
          "--docsearch-searchbox-height": "56px",
          "--docsearch-searchbox-background":
            "var(--sl-color-gray-7, var(--sl-color-gray-6))",
          "--docsearch-searchbox-focus-background": "var(--sl-color-black)",
          "--docsearch-searchbox-shadow":
            "inset 0 0 0 1px var(--docsearch-primary-color)",
          "--docsearch-hit-height": "56px",
          "--docsearch-hit-color": "var(--sl-color-white)",
          "--docsearch-hit-active-color": "var(--sl-color-black)",
          "--docsearch-hit-background": "var(--sl-color-black)",
          "--docsearch-key-gradient":
            "linear-gradient(var(--sl-color-bg-inline-code) 0%, var(--sl-color-bg-inline-code) 100%)",
          "--docsearch-footer-height": "44px",
          "--docsearch-footer-background": "var(--sl-color-black)",
          "--docsearch-footer-shadow":
            "0 -1px 0 0 var(--sl-color-hairline-light)",
        },

      });
      // 设置全局变量颜色
      addBase({
        ":root": {
          "overflow-y": "scroll",
          "--sl-color-white": "hsl(224, 10%, 10%)",
          "--sl-color-gray-1": "hsl(224, 14%, 16%)",
          "--sl-color-gray-2": "hsl(224, 10%, 23%)",
          "--sl-color-gray-3": "hsl(224, 7%, 36%)",
          "--sl-color-gray-4": "hsl(224, 6%, 56%)",
          "--sl-color-gray-5": "hsl(224, 6%, 77%)",
          "--sl-color-gray-6": "hsl(224, 20%, 94%)",
          "--sl-color-gray-7": "hsl(224, 19%, 97%)",
          "--sl-color-black": "hsl(0, 0%, 100%)",
          "--sl-color-orange-high": "hsl(var(--sl-hue-orange), 80%, 25%)",
          "--sl-color-orange": "hsl(var(--sl-hue-orange), 90%, 60%)",
          "--sl-color-orange-low": "hsl(var(--sl-hue-orange), 90%, 88%)",
          "--sl-color-green-high": "hsl(var(--sl-hue-green), 80%, 22%)",
          "--sl-color-green": "hsl(var(--sl-hue-green), 90%, 46%)",
          "--sl-color-green-low": "hsl(var(--sl-hue-green), 85%, 90%)",
          "--sl-color-blue-high": "hsl(var(--sl-hue-blue), 80%, 30%)",
          "--sl-color-blue": "hsl(var(--sl-hue-blue), 90%, 60%)",
          "--sl-color-blue-low": "hsl(var(--sl-hue-blue), 88%, 90%)",
          "--sl-color-purple-high": "hsl(var(--sl-hue-purple), 90%, 30%)",
          "--sl-color-purple": "hsl(var(--sl-hue-purple), 90%, 60%)",
          "--sl-color-purple-low": "hsl(var(--sl-hue-purple), 80%, 90%)",
          "--sl-color-red-high": "hsl(var(--sl-hue-red), 80%, 30%)",
          "--sl-color-red": "hsl(var(--sl-hue-red), 90%, 60%)",
          "--sl-color-red-low": "hsl(var(--sl-hue-red), 80%, 90%)",

          "--sl-color-accent-high": "hsl(234, 80%, 30%)",
          "--sl-color-accent": "hsl(234, 90%, 60%)",
          "--sl-color-accent-low": "hsl(234, 88%, 90%)",

          "--sl-color-text-accent": "var(--sl-color-accent)",
          "--sl-color-text-invert": "var(--sl-color-black)",
          "--sl-color-bg-nav": "var(--sl-color-gray-7)",
          "--sl-color-bg-sidebar": "var(--sl-color-bg)",
          "--sl-color-bg-inline-code": "var(--sl-color-gray-6)",
          "--sl-color-bg-accent": "var(--sl-color-accent)",
          "--sl-color-hairline-light": "var(--sl-color-gray-6)",
          "--sl-color-hairline-shade": "var(--sl-color-gray-6)",

          "--sl-color-backdrop-overlay": "hsla(225, 9%, 36%, 0.66)",

          /* Shadows (light mode) */
          "--sl-shadow-sm": "0px 1px 1px hsla(0, 0%, 0%, 0.06), 0px 2px 1px hsla(0, 0%, 0%, 0.06)",
          "--sl-shadow-md": "0px 8px 4px hsla(0, 0%, 0%, 0.03), 0px 5px 2px hsla(0, 0%, 0%, 0.03),0px 3px 2px hsla(0, 0%, 0%, 0.06), 0px 1px 1px hsla(0, 0%, 0%, 0.06)",
          "--sl-shadow-lg": "0px 25px 7px rgba(0, 0, 0, 0.01), 0px 16px 6px hsla(0, 0%, 0%, 0.03),0px 9px 5px hsla(223, 13%, 10%, 0.08), 0px 4px 4px hsla(0, 0%, 0%, 0.16),0px 4px 2px hsla(0, 0%, 0%, 0.04)",

          "----sl-text-xs": "0.8125rem", /* 13px */
          "--sl-text-sm": "0.875rem", /* 14px */
          "--sl-text-base": "1rem", /* 16px */
          "--sl-text-lg": "1.125rem", /* 18px */
          "--sl-text-xl": "1.25rem", /* 20px */
          "--sl-text-2xl": "1.5rem", /* 24px */
          "--sl-text-3xl": "1.8125rem", /* 29px */
          "--sl-text-4xl": "2.1875rem", /* 35px */
          "--sl-text-5xl": "2.625rem", /* 42px */
          "--sl-text-6xl": "4rem", /* 64px */

          "--sl-text-body": "var(--sl-text-base)",
          "--sl-text-body-sm": "var(--sl-text-xs)",
          "--sl-text-code": "var(--sl-text-sm)",
          "--sl-text-code-sm": "var(--sl-text-xs)",
          "--sl-text-h1": "var(--sl-text-4xl)",
          "--sl-text-h2": "var(--sl-text-3xl)",
          "--sl-text-h3": "var(--sl-text-2xl)",
          "--sl-text-h4": "var(--sl-text-xl)",
          "--sl-text-h5": "var(--sl-text-lg)",

          "--sl-line-height": "1.8",
          "--sl-line-height-headings": "1.2",

          "--sl-font-system": "ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,'Helvetica Neue', Arial, 'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji','Segoe UI Symbol', 'Noto Color Emoji'",
          "--sl-font-system-mono": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono','Courier New', monospace",
          "--__sl-font": "var(--sl-font, ''), var(--sl-font-system)",
          "--__sl-font-mono": "var(--sl-font-mono, ''), var(--sl-font-system-mono)",

          /** Key layout values */
          "--sl-nav-height": "3.5rem",
          "--sl-nav-pad-x": "1rem",
          "--sl-nav-pad-y": "0.75rem",
          "--sl-mobile-toc-height": "3rem",
          "--sl-sidebar-width": "18.75rem",
          "--sl-sidebar-pad-x": "1rem",
          "--sl-content-width": "45rem",
          "--sl-content-pad-x": "1rem",
          "--sl-menu-button-size": "2rem",
          "--sl-nav-gap": "var(--sl-content-pad-x)",
          /* Offset required to show outline inside an element instead of round the outside */
          "--sl-outline-offset-inside": "-0.1875rem",

          /* Global z-index values */
          "--sl-z-index-toc": "4",
          "--sl-z-index-menu": "5",
          "--sl-z-index-navbar": "10",
          "--sl-z-index-skiplink": "20",
        }
      });
      // safari兼容oklch
      addBase({
        '@supports not (color: oklch(0 0 0))': {
          ':root': {
            'color-scheme': 'light',
            '--fallback-p': theme('colors.primary'),
            '--fallback-pc': theme('colors.secondary'),
            '--fallback-s': theme('colors.secondary'),
            '--fallback-sc': theme('colors.neutral'),
            '--fallback-a': theme('colors.accent'),
            '--fallback-ac': theme('colors.error'),
            '--fallback-n': theme('colors.base-100'),
            '--fallback-nc': theme('colors.neutral'),
            '--fallback-b1': theme('colors.primary'),
            '--fallback-b2': theme('colors.primary'),
            '--fallback-b3': theme('colors.error'),
            '--fallback-bc': theme('colors.neutral'),
            '--fallback-in': theme('colors.neutral'),
            '--fallback-inc': theme('colors.neutral'),
            '--fallback-su': theme('colors.primary'),
            '--fallback-suc': theme('colors.neutral'),
            '--fallback-wa': theme('colors.success'),
            '--fallback-wac': theme('colors.neutral'),
            '--fallback-er': theme('colors.neutral'),
            '--fallback-erc': theme('colors.neutral'),
          },
        }
      });
      addBase({
        '@media (min-width: 50em)': {
          'root': {
            "--sl-nav-height": "4rem",
            "--sl-nav-pad-x": "1.5rem",
            "--sl-text-h1": "var(--sl-text-5xl)",
            "--sl-text-h2": "var(--sl-text-4xl)",
            "--sl-text-h3": "var(--sl-text-3xl)",
            "--sl-text-h4": "var(--sl-text-2xl)",
          }
        },
        '@media (min-width: 72rem)': {
          'root': {
            "--sl-content-pad-x": "1.5rem",
           " --sl-mobile-toc-height": "0rem"
          }
        }
      })
    },
    {
      // Starlight uses a `data-theme` attribute to power its dark mode.
      darkMode: ["class", '[data-theme="dark"]'],
      corePlugins: {
        // Disable Tailwind’s default reset styles which conflict with Starlight.
        preflight: false,
      },
    }
  );

function hexToLuminance(hex) {
  const rgb = parseInt(hex.slice(1), 16);
  const r = (rgb >> 16) & 0xff;
  const g = (rgb >> 8) & 0xff;
  const b = (rgb >> 0) & 0xff;
  // 使用加权平均来计算亮度
  return 0.299 * r + 0.587 * g + 0.114 * b;
}

function findDistinguishableColors(targetHex, minLuminance) {
  const minLuminanceDifference = minLuminance
    ? minLuminance
    : isDark(targetHex)
    ? 30
    : 20; // 亮度差异值
  const colors = generateSaturatedColors(targetHex, 100);
  const targetLuminance = hexToLuminance(targetHex);
  let closestDarker = null;
  let closestLighter = null;
  let closestDarkerLuminanceDiff = Infinity;
  let closestLighterLuminanceDiff = Infinity;

  colors.forEach((hex) => {
    const luminance = hexToLuminance(hex);
    const luminanceDiff = luminance - targetLuminance;

    if (
      luminanceDiff < 0 &&
      Math.abs(luminanceDiff) > minLuminanceDifference &&
      Math.abs(luminanceDiff) < closestDarkerLuminanceDiff
    ) {
      closestDarkerLuminanceDiff = Math.abs(luminanceDiff);
      closestDarker = hex;
    } else if (
      luminanceDiff > 0 &&
      luminanceDiff > minLuminanceDifference &&
      luminanceDiff < closestLighterLuminanceDiff
    ) {
      closestLighterLuminanceDiff = luminanceDiff;
      closestLighter = hex;
    }
  });

  return {
    closestDarker: closestDarker || colorBlack,
    closestLighter: closestLighter || colorWhite,
  };
}

const generateColor = () =>
  plugin(function ({ addUtilities, theme, config }) {
    const textButtonLightColor = "#121717";
    const textButtonDarkColor = "#EBEFEF";
    const textButtonDarkActiveColor = "#F4F4F6";
    const colors = config("daisyui.themes")[0].light;

    const customUtilities = {};

    Object.keys(colors).forEach((key) => {
      const value = colors[key];
      const closestColors = findDistinguishableColors(value, 0);
      customUtilities[`.bg-${key}-button`] = {
        backgroundColor: isDark(value)
          ? closestColors.closestLighter
          : closestColors.closestDarker,
      };

      if (isDark(value)) {
        customUtilities[`.text-${key}-button`] = { color: textButtonDarkColor };
        customUtilities[`.text-${key}-button-active`] = {
          color: textButtonDarkActiveColor,
        };
      } else {
        customUtilities[`.text-${key}-button`] = {
          color: textButtonLightColor,
        };
        customUtilities[`.text-${key}-button-active`] = {
          color: textButtonLightColor,
        };
      }

      // push LinkButton style
      customUtilities[`.link-button-bg-${key}`] = { backgroundColor: value };
      customUtilities[`.link-button-bg-${key}:hover`] = {
        backgroundColor: isDark(value)
          ? closestColors.closestLighter
          : closestColors.closestDarker,
      };
    });

    addUtilities(customUtilities);
  });

export const goatuiPlugins = [generateColor(), daisyui, goatPlugin()];

// 预先设置tailwindcss的safelist，保证动态classname
export const getSafelist = (params) => {
  const { colorList = [] } = params;
  const safelist: Array<string> = [];

  colorList.forEach((item) => {
    // LanguageToggle
    safelist.push(`bg-${item}-button`);
    safelist.push(`bg-${item}`);
    safelist.push(`text-${item}-button`);
    safelist.push(`text-${item}-button-active`);

    // LinkButton
    safelist.push(`fill-${item}`);
    safelist.push(`link-button-bg-${item}`);
    safelist.push(`link-button-bg-${item}:hover`);
  });

  return safelist;
};

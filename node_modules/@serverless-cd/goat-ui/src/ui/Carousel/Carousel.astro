---
  import type { Carousel } from "./type";
  import { Image } from "astro:assets";
  import { twMerge } from "tailwind-merge";
  const {
    imgs = [],
    time = '40s',
    direction = 'RTL',
    width = 112,
    height = 96,
    class: className = "",
    theme="gray",
  } = Astro.props as Carousel;
  const slideTopDirection = direction =='LTR' ? 'CarouselLTR' : 'CarouselRTL';
  const slideBottomDirection = direction =='LTR' ? 'CarouselLTR2' : 'CarouselRTL2';

---

<div class="flex flex-col items-center overflow-hidden">

  {imgs.length > 0 && (<div class="bottom-silder relative overflow-hidden md:flex hidden">
      <ul class="slider shrink-0 p-0 list-none inline-block uppercase cursor-pointer whitespace-nowrap ">
        {
          imgs.map((logo, index) => (
        <li class={twMerge("inline-block py-0 px-5 grayscale", className)}>
          <Image src={logo} alt="log" width={width} height={height} class="object-contain opacity-70 cursor-pointer"/>
        </li>
        ))
        }
      </ul>
      <ul class="slider shrink-0 p-0 list-none inline-block uppercase cursor-pointer whitespace-nowrap ">
        {
          imgs.map((logo, index) => (
        <li class={twMerge("inline-block py-0 px-5 grayscale", className)}>
          <Image src={logo} alt="log" width={width} height={height} class="object-contain opacity-70 cursor-pointer"/>
        </li>
        ))
        }
      </ul>
    </div>)}
    <div class="md:hidden flex flex-wrap my-0 mx-[-8px] ">
      {
      imgs.map((logo) => (
      <div class={`py-0 px-[0.375rem] flex justify-center items-center border border-${theme} max-w-full flex-1 grayscale mt-0 mx-2 mb-4`}>
        <Image src={logo} alt="log" width={width} height={height} class="object-contain cursor-pointer" />
      </div>
      ))
      }
    </div>
</div>

<style define:vars={{ time ,slideTopDirection,slideBottomDirection}}>

  .slider {
    white-space: nowrap;
    animation: var(--slideTopDirection) var(--time) linear infinite ;
    animation-delay: calc(var(--time) * -1);
  }
  @keyframes CarouselRTL {
    0% {
      transform: translateX(150%);
    }

    100% {
      transform: translateX(-50%);
    }
  }
  .bottom-silder > .slider:nth-child(2){
    animation: var(--slideBottomDirection) var(--time) linear infinite ;
    animation-delay: calc(var(--time) / -2);
  }
  @keyframes CarouselRTL2 {
  0% {
    transform: translateX(50%);
  }

  100% {
    transform: translateX(-150%);
  }
}
  .bottom-silder:hover > .slider {
    animation-play-state: paused;
  }


  @keyframes CarouselLTR {
    0% {
      transform: translateX(-50%);
    }

    100% {
      transform: translateX(150%);
    }
  }

  @keyframes CarouselLTR2 {
  0% {
    transform: translateX(-150%);
  }

  100% {
    transform: translateX(50%);
  }
}


</style>
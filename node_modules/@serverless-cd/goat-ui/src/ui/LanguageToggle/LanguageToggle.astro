---
import type { languageToggle } from "./types";

const { 
    id="toggle", 
    lang="zh-cn",
    theme="primary",
} = Astro.props as languageToggle;

const initialState = lang === "zh-cn" ? false : true;
---

<div>
    <!-- pc -->
    <toggle-content
        class="switch float-left relative m-0 rounded-[2rem] max-md:hidden"
    >
        <input
            disabled={true}
            data-switch
            class=`switch-checkbox hidden`
            id={`${id}-switch`}
            type="checkbox"
            checked={initialState}
        />

        <!-- container -->
        <label
            class=`switch-label block overflow-hidden cursor-pointer rounded-[2rem]  
                bg-${theme}
            `
            for={`${id}-switch`}
        >
            <!-- static -->
            <span 
                class=`switch-inner block 
                    text-${theme}-button
                `
                data-on="中文" 
                data-off="EN"
            ></span>

            <!-- active -->
            <span 
                class=`switch-switch absolute float-right mx-1 
                    text-${theme}-button-active
                    bg-${theme}-button
                `
                data-on="EN" 
                data-off="中文"
            ></span>
        </label>
    </toggle-content>

    <!-- mobile -->
    <div
        data-switch
        class={`w-[3.5rem] h-[1.5rem] leading-[1.5rem] text-xs text-center rounded-2xl bg-gray-12 max-md:inline-block md:hidden border`}
        id={`${id}-switch`}
    >
        { lang === "zh-cn" ? "中文" : "EN" }
    </div>
</div>

<script>
    class Toggle extends HTMLElement {
        constructor() {
            super();

            document.querySelectorAll("input[data-switch]").forEach(element=>{
                element.addEventListener("click", () => {
                    this.toggleLanguage();
                });
            });

            document.querySelectorAll("div[data-switch]").forEach(element=>{
                element.addEventListener("click", () => {
                    this.toggleLanguage();
                });
            });
        }
  
        toggleLanguage = () => {
            if(document.readyState !== 'complete') return;
            const enReg = /^(\/en).+/;
            if (enReg.test(window?.location?.pathname)) {
                window.location.pathname = window.location.pathname.replace(
                    "/en/",
                    "/",
                );
            } else {
                window.location.pathname = window.location.pathname.replace(
                    "/",
                    "/en/",
                );
            }
        };

        connectedCallback() {
            if (document.readyState === 'complete') {
                this.handleAllResourcesLoaded();
            } else {
                window.addEventListener('load', this.handleAllResourcesLoaded);
            };
        };

        disconnectedCallback() {
            window.removeEventListener('load', this.handleAllResourcesLoaded);
        };

        handleAllResourcesLoaded = () => {
            document.querySelectorAll("input[data-switch]").forEach(element=> element.disabled = false);
        };
    };
    
    customElements.define("toggle-content", Toggle);
</script>

<style>
    toggle-content {
        --toggle-ml-width: 7rem;
        --toggle-xl-width: 7.5rem;
        --toggle-ml-height: 2rem;
        --toggle-xl-height: 2.5rem;
        --toggle-ml-font: 0.75rem;
        --toggle-xl-font: 0.85rem;
        --toggle-ml-switch-width: 3.5rem;
        --toggle-xl-switch-width: 3.75rem;
        --toggle-ml-switch-height: 1.5rem;
        --toggle-xl-switch-height: 2rem;
    }
    .switch {
        width: var(--toggle-ml-width);
    }
    .switch-inner {
        width: 200%;
        margin-left: -100%;
    }
    .switch-inner::before,
    .switch-inner::after {
        display: block;
        float: right;
        width: 50%;
        height: var(--toggle-ml-height);
        padding: 0;
        line-height: var(--toggle-ml-height);
        font-size: var(--toggle-ml-font);
        box-sizing: border-box;
    }
    .switch-inner::after {
        content: attr(data-on);
        padding-left: 1.25rem;
    }
    .switch-inner::before {
        content: attr(data-off);
        padding-right: 1.25rem;
        text-align: right;
    }
    /* btn */
    .switch-switch {
        height: var(--toggle-ml-switch-height);
        width: var(--toggle-ml-switch-width);
        bottom: 0.25rem;
        border-radius: 2rem;
        transition: all 0.3s ease-in 0s;
        text-align: right;
    }
    .switch-switch::before {
        display: flex;
        content: attr(data-off);
        height: 100%;
        font-size: var(--toggle-ml-font);
        align-items: center;
        justify-content: center;
    }
    .switch-checkbox:checked + .switch-label .switch-inner {
        margin-left: 0;
    }
    .switch-checkbox:checked + .switch-label .switch-switch {
        right: 0;
    }
    .switch-checkbox:checked + .switch-label .switch-switch::before {
        display: flex;
        content: attr(data-on);
        height: 100%;
        font-size: var(--toggle-ml-font);
        align-items: center;
        justify-content: center;
    }
</style>